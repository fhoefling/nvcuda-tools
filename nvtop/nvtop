#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# reformat output of the nvidia-smi tool
#
# Copyright © 2011-2013  Felix Höfling
#
# This tool is free software and released under the terms of
# the GNU General Public License Version 3, please refer to
# <http://www.gnu.org/licenses/> for details.

from subprocess import Popen, PIPE
from xml.etree import ElementTree
from re import sub

# grab output of nvidia-smi tool
try:
    nvsmi = Popen(['nvidia-smi', '-a', '-x'], stdout=PIPE).communicate()[0]
except:
    raise SystemExit("Error while reading from nvidia-smi")

# parse XML
xmlt = ElementTree.XML(nvsmi)

# print header
print '''\
ID  Name            Utilization    Temp   Fan    Processes
                    GPU   Memory                 ID      Memory   Name\
'''

# retrieve GPU information from XML groups
for id,gpu in enumerate(xmlt.getiterator(tag="gpu")):
    info = {}
    info["id"] = '{0:d}'.format(id)
    info["name"] = gpu.findtext("prod_name") or gpu.findtext("product_name") or "n/a"
    info["temp"] = gpu.findtext("temp") or gpu.findtext("temperature/gpu_temp") or ""
    info["fan"] = gpu.findtext("fan_speed") or ""
    info["gpu_util"] = gpu.findtext("utilization/gpu_util") or ""
    info["mem_util"] = gpu.findtext("utilization/memory_util") or ""

    info["name"] = sub(' Processor', '', info["name"]) # simplify name

    info["proc"] = ""
    compute = gpu.find("compute_processes")
    for i,proc in compute and enumerate(compute.getiterator(tag="process_info")) or ():
        pid = proc.findtext("pid")
        mem = proc.findtext("used_memory")
        name = proc.findtext("process_name")
        if i > 0:
            info["proc"] += '\n{0:49}'.format("")
        info["proc"] += '{0:8s}{1:>7s}  {2:16s}'.format(pid, mem, name)

    # output data in one line
    print '{id:4s}{name:16s}{gpu_util:>4s}   {mem_util:>4s}    {temp:7s}{fan:7s}{proc:s}'.format(**info)
