#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# nvlock - Exclusively lock an unused NVIDIA device and execute given program
#
# Copyright (C) 2008  Peter Colberg
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import fcntl
import glob
import os, sys, os.path


def nvlock(cmd):
    # use devices in reverse order as first device is CUDA default
    devices = sorted(glob.glob('/dev/nvidia[0-9]'), reverse=True)

    if not devices:
        raise SystemExit('nvlock: no NVIDIA devices found')

    for dev in devices:
        try:
            fd = open(dev, 'a')
        except IOError:
            raise SystemExit('nvlock: could not open device: %s' % dev)

        try:
            fcntl.flock(fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError:
            fd.close()
            continue

        # set numeric CUDA device in environment variable
        os.environ['CUDA_DEVICE'] = dev[11:]
        # replace process with given program
        os.execvp(cmd[0], cmd)

    raise SystemExit('nvlock: no unused NVIDIA device found')


if __name__ == "__main__":
    # usage description
    if len(sys.argv) < 2:
        raise SystemExit('usage: nvlock <command>')

    nvlock(sys.argv[1:])

